n = int(input())
dp = [[0 for _ in range(10)] for _ in range(n)]

for i in range(1, 10):
    dp[0][i] = 1

for i in range(1, n):
    for j in range(10):
        if j - 1 >= 0:
            dp[i][j] += dp[i-1][j-1] % 1000000000
        if j + 1 <= 9:
            dp[i][j] += dp[i-1][j+1] % 1000000000

print(sum(dp[-1]) % 1000000000)

"""
0~9 까지의 숫자가 들어갈 수 있는 개수를 각 자리수마다 계산해 나간다.
n * 10 (0~9) 크기의 DP 테이블을 이용하는데

sum(dp[i]) = i번째 자리수 까지 들어갈 수 있는 계단수의 개수이다.
j는 해당 자리수까지 만들 수 있는 숫자 자체의 개수를 뜻하는데 아래와 같다.

dp[1] -> dp[2] // 코드 상으로는 dp[0] -> dp[1]
-----------------------------------
0 -> 1
1 -> 0, 2
2 -> 1, 3
3 -> 2, 4
4 -> 3, 5
5 -> 4, 6
6 -> 5, 7
7 -> 6, 8
8 -> 7, 9
9 -> 8
-----------------------------------
dp[1] 
j  / 0  1  2  3  4  5  6  7  8  9
갯수/ 0  1  1  1  1  1  1  1  1  1
*
dp[2]
j  / 0  1  2  3  4  5  6  7  8  9
갯수/ 1  1  2  2  2  2  2  2  2  1
-----------------------------------
예를 들어 숫자 1 다음으로 올 수 있는 계단수는 0과 2 이므로,
dp[i][1] = dp[i-1][0] + dp[i-1][2] 과 같이 나타낼 수 있다.

숫자 0과 9는 다음 계단수로 각각 1(0+1)과 8(9-1)밖에 오지 못하므로
범위에 주의해야한다
"""